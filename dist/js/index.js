/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/***/ (() => {

eval("// const fs = require(\"fs\");\r\n// const data = fs.readFileSync(\"./js_markdown.md\", \"utf-8\");\r\n// console.log(data,'datra')\r\nlet keyword = [\r\n  \"let\",\r\n  \"var\",\r\n  \"=>\",\r\n  \"+\",\r\n  \"=\",\r\n  \":\",\r\n  \"case\",\r\n  \"for\",\r\n  \"function\",\r\n  \"switch\",\r\n  \"console.log\",\r\n];\r\n// htmlRes(data);\r\nvar htmlArr = [];\r\nvar htmlData = []; //html元素数组\r\nvar titleArr = []; //列表数组\r\n\r\n//判断是不是####\r\nfunction htmlRes(data) {\r\n  if (htmlArr === undefined) htmlArr = [];\r\n  htmlArr = data.split(\"\\n\");\r\n  // console.log(htmlArr,'htmlArrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr')\r\n  htmlArr.forEach((item, index) => {\r\n    item = item.trim();\r\n    //标题\r\n    if (item !== \"\\n\" && item.length > 1) {\r\n      let titleRes = retrunTitle(item);\r\n      if (titleRes) {\r\n        htmlData.push(titleRes);\r\n      }\r\n    }\r\n    // //超链接 字符必须超过6个\r\n    if (item.length > 6 && item.trim()[0] !== \"!\") {\r\n      ifLink(item);\r\n    }\r\n    //引用语法\r\n    if (item.length > 2 && item[0] == \">\") {\r\n      htmlData.push(returnQuote(item, index));\r\n    }\r\n    //图片\r\n    if (item.length > 5 && item[0] == \"!\") {\r\n      returnImg(item);\r\n    }\r\n    //判断有序列表\r\n    if (returnIsOl(item)) {\r\n      let arr = htmlArr[index].split(\"\");\r\n      let num = 0;\r\n      let flag = true;\r\n      let i = 0;\r\n      while (flag) {\r\n        if (arr[i] === \" \") {\r\n          num = num + 1;\r\n        } else {\r\n          flag = false;\r\n        }\r\n        i = i + 1;\r\n      }\r\n      if (num % 4 === 0 && num !== 0) {\r\n        let sign = num / 4;\r\n        if (!titleArr) titleArr = [];\r\n        if (titleArr.length == 0 && sign >= 1) {\r\n          return;\r\n        } else {\r\n          let last = callBackFn(titleArr, sign);\r\n          if (last.num === 1) {\r\n            //说明有这个深度的children\r\n            if (last.data.children) {\r\n              last.data.children.push({ 0: item });\r\n            } else {\r\n              last.data.children = [{ 0: item }];\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        if (!titleArr) titleArr = [];\r\n        titleArr.push({ 0: item, children: [] });\r\n      }\r\n      // console.log(JSON.stringify(titleArr),'titleArr11111',returnIsOl(htmlArr[index+1]),htmlArr[index+1])\r\n      if (!returnIsOl(htmlArr[index + 1])) {\r\n        //这里判断下一行是不是li不是的话直接处理数据并清空 titleArr\r\n        //进行处理\r\n        let ol = returnOl(titleArr);\r\n        htmlData.push(ol.flat(Infinity).join(\" \"));\r\n        titleArr = []; //制空处理\r\n      }\r\n    }\r\n\r\n    //html标签\r\n    if (/^<[a-z]* *style=\\\".*\\\">.*<\\/[a-z]*>/.test(item)) {\r\n      htmlData.push(item);\r\n    }\r\n\r\n    //代码块\r\n    // console.log(item,'item3')\r\n    if (item.slice(0, 4) === \"````\") {\r\n      returnCodeBlock(item, index);\r\n    }\r\n    // console.log(JSON.stringify(titleArr) ,'\\n' ,'连续的空格数')\r\n  });\r\n\r\n  return htmlData;\r\n}\r\nfunction returnIsOl(item) {\r\n  return \"0123456789\".indexOf(item.trim()[0] - 0) !== -1;\r\n}\r\n//判断有没有这个深度的children\r\nfunction callBackFn(data, num) {\r\n  if (!data.length) return { data, num };\r\n  if (num < 1) return undefined;\r\n  if (num === 1) {\r\n    if (!data.length) return { data, num };\r\n    return { data: data[data.length - 1], num };\r\n  } else {\r\n    if (!data[data.length - 1]) return { data, num };\r\n    return callBackFn(data[data.length - 1].children, num - 1);\r\n  }\r\n}\r\n//返回标题\r\nfunction retrunTitle(item) {\r\n  // 1-7 #\r\n  for (let i = 7; i >= 1; i--) {\r\n    if (item.indexOf(returnFor(i)) !== -1 && item[0] === \"#\") {\r\n      if (htmlData === undefined) htmlData = [];\r\n      //这里就是 查询的字符的索引然后加上这个标题#的个数就是内容\r\n      return createElement(item.indexOf(returnFor(i)) + i, item);\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\n//生成 1-7 个#\r\nfunction returnFor(num) {\r\n  let data = \"\";\r\n  for (let i = 0; i < num; i++) {\r\n    data += \"#\";\r\n  }\r\n  return data;\r\n}\r\n\r\n//创建h标签\r\nfunction createElement(num, item) {\r\n  item = item.slice(num).replace(\"\\r\", \"\");\r\n  return `<h${num}>${item}</h${num}>`;\r\n}\r\n\r\n//判断是不是超链接--------------------------------------------------------------\r\nfunction ifLink(content) {\r\n  content = content.trim();\r\n  // []()\r\n  let arr = [\"[\", \"]\", \"(\", \")\"];\r\n  let arr2 = [];\r\n  let flag = 0;\r\n  //循环查询\r\n  arr.forEach((item) => {\r\n    if (content.indexOf(item) !== -1) {\r\n      arr2.push(content.indexOf(item));\r\n      flag++;\r\n    }\r\n  });\r\n  //四个都有\r\n  if (flag === 4) {\r\n    if (\r\n      arr2[0] < arr2[1] &&\r\n      arr2[1] + 1 === arr2[2] &&\r\n      arr2[3] == content.length - 1\r\n    ) {\r\n      //这个时候就是超链接 -----提取内容[a标签内容] (链接)\r\n      let aText = content.slice(arr2[0] + 1, arr2[1]);\r\n      let link = content.slice(arr2[2] + 1, arr2[3]);\r\n      if (htmlData === undefined) htmlData = [];\r\n      htmlData.push(`<a href=\"${link}\" alt=\"图片\">${aText}</a>`);\r\n    }\r\n  } else {\r\n    return;\r\n  }\r\n}\r\n\r\n//------------------------------引用语法------------------------------------\r\nfunction returnQuote(content, index = null) {\r\n  content = content.trim();\r\n  let arrHtml = [content.slice(1).trim()]; //引用的数据\r\n  let { successCount } = returnContinu(index, arrHtml, \">\");\r\n  let htmlStr = createElementQ(\"div\", { class: \"quote\" }, \"div\");\r\n  //处理引用\r\n  for (let i = 0; i < arrHtml.length; i++) {\r\n    arrHtml[i] = arrHtml[i].trim();\r\n    if (retrunTitle(arrHtml[i])) {\r\n      //引用+标题\r\n      arrHtml[i] = retrunTitle(arrHtml[i]);\r\n    } else {\r\n      //这里没有标题\r\n      let ele = createElementQ(\"p\", {}, \"p\");\r\n      ele.splice(1, 0, arrHtml[i]);\r\n      arrHtml[i] = ele.join(\"\");\r\n    }\r\n  }\r\n  htmlArr.splice(index + 1, successCount);\r\n  htmlStr.splice(1, 0, arrHtml.join(\"\"));\r\n  htmlData = htmlData.concat(htmlStr.join(\"\"));\r\n  return false;\r\n}\r\n\r\n//----------------------------图片语法--------------------------------\r\nfunction returnImg(item) {\r\n  // console.log(item, \"item\");\r\n  item = item.trim();\r\n  let rule = {\r\n    0: \"!\",\r\n    1: \"[\",\r\n    2: \"]\",\r\n    3: \"(\",\r\n    4: \")\",\r\n  };\r\n  let r0 = item.indexOf(rule[\"0\"]);\r\n  let r1 = item.indexOf(rule[\"1\"], r0);\r\n  let r2 = item.indexOf(rule[\"2\"], r1);\r\n  let r3 = item.indexOf(rule[\"3\"], r2);\r\n  let r4 = item.indexOf(rule[\"4\"], r3);\r\n  let alt = \"\";\r\n  let src = \"\";\r\n  let imgTitle = \"\";\r\n  if (\r\n    item[0] === rule[\"0\"] &&\r\n    r1 < r2 &&\r\n    r2 < item.indexOf(rule[\"3\"]) &&\r\n    r3 < r4 &&\r\n    item[item.length - 1] === rule[\"4\"]\r\n  ) {\r\n    alt = item.slice(r1 + 1, r2);\r\n    let str = item.slice(r3 + 1, r4);\r\n    if (str.indexOf(\" \") !== -1) {\r\n      src = str.split(\" \")[0];\r\n      imgTitle = str.split(\" \")[1];\r\n    }\r\n    htmlData.push(\r\n      createElementQ(\"img\", { alt, src, title: imgTitle }).join(\"\")\r\n    );\r\n  }\r\n}\r\n\r\n//----------------------------无序列表-------------------------------------\r\nfunction returnOl(content) {\r\n  let ol = createElementQ(\"ol\", {}, \"ol\");\r\n  if (content.length) {\r\n    for (let i = 0; i < content.length; i++) {\r\n      let li = createElementQ(\"li\", {}, \"li\");\r\n      for (let key in content[i]) {\r\n        if (key === \"children\") {\r\n          let olC = returnOl(content[i][key]);\r\n          li.splice(li.length - 1, 0, olC);\r\n        } else {\r\n          li.splice(li.length - 1, 0, content[i][key]);\r\n        }\r\n      }\r\n      ol.splice(ol.length - 1, 0, li);\r\n    }\r\n  }\r\n  return ol;\r\n}\r\n\r\n//创建标签\r\nfunction createElementQ(name, classObj) {\r\n  let keys = Object.keys(classObj);\r\n  let str = \"\";\r\n  keys.forEach((item) => {\r\n    str += `${item}='${classObj[item]}' `;\r\n  });\r\n  let arr1 = [`<${name} ${str}>`];\r\n  let arr2 = [`</${name}>`];\r\n  return arr1.concat(arr2);\r\n}\r\n\r\n/**\r\n *\r\n * @param {*} index 当前位置索引\r\n * @returns {\r\n *    successCount 连续的个数\r\n * label 开头标签\r\n * }\r\n */\r\nfunction returnContinu(index, arrHtml, label, num = 2) {\r\n  let flag = true;\r\n  let i = index + 1; //初始当前数据的下一条\r\n  let successCount = 0; //要删除的数量\r\n  while (flag) {\r\n    if (htmlArr[i]) {\r\n      let str = htmlArr[i][0];\r\n      if (label.indexOf(str) !== -1) {\r\n        //连续的引用数量\r\n        arrHtml.push(htmlArr[i].slice(num));\r\n        i = i + 1;\r\n        successCount = successCount + 1;\r\n      } else {\r\n        flag = false;\r\n        continue;\r\n      }\r\n    } else {\r\n      flag = false;\r\n    }\r\n  }\r\n  return {\r\n    successCount,\r\n  };\r\n}\r\n//代码块\r\nfunction returnCodeBlock(item, index) {\r\n  let len;\r\n  htmlArr.slice(index + 1).forEach((item2, index2) => {\r\n    if (item2.slice(0, 4) === \"````\") {\r\n      len = index2;\r\n      console.log(\"结束代码块\", index, len);\r\n    }\r\n  });\r\n  let arr = htmlArr.slice(index + 1, index + len + 1);\r\n  let code = createElementQ(\"div\", { class: \"code\" });\r\n  let s = blockHighLight(arr)\r\n  s = s.replace(/classeqs/g, \"class=\")\r\n  s = s.replace(/styleeqs/g,\"style=\")\r\n  s = s.replace(/\\&mh\\&/g,':');\r\n  code.splice(code.length - 1, 0, s);\r\n\r\n  console.log(arr, \"arrrrr\");\r\n  // arr.forEach(item=>{\r\n  //   let arrC = item.split(' ')\r\n  //   let p = createElementQ(\"p\",{})\r\n  //   arrC.forEach((item2,index2)=>{\r\n  //     if(item2 !== ' '){ //判断不是空格\r\n  //       // debugger\r\n  //       for(let key in keys){ //遍历关键字\r\n  //         if(keys[key].indexOf(item2) !== -1){\r\n  //           let text = createElementQ(\"text\",{\r\n  //             style:`color:${key}`\r\n  //           })\r\n  //           text.splice(1,0,item2)\r\n  //           p.splice(p.length-1,0,text.join(' '))\r\n  //         }else{\r\n  //           let text = createElementQ(\"text\",{})\r\n  //           text.splice(1,0,item2)\r\n  //           p.splice(p.length-1,0,text.join(' '))\r\n  //         }\r\n  //       }\r\n  //     }\r\n  //   })\r\n  //   if(p.length > 2){\r\n  //     code.splice(code.length-1,0,p.join(' '))\r\n  //   }\r\n  // })\r\n  //到这个地方都插进去了已经\r\n  htmlData.push(code.join(\" \"));\r\n  htmlArr.splice(index, len + 1);\r\n}\r\n\r\n//代码块高亮处理函数\r\n/**\r\n *\r\n * @param {Array} arr 数据\r\n */\r\nfunction blockHighLight(arr) {\r\n  let arr2 = [];\r\n  arr.forEach((item, index) => {\r\n    if (item.trim() !== \"\") {\r\n      arr2.push(keywordsHighLight(symbolHighLight(fnHighLight(item))));\r\n    }\r\n  });\r\n  return arr2.join(\"\");\r\n}\r\n\r\n//处理关键字 高亮函数 #c3655d\r\nfunction keywordsHighLight(row) {\r\n  let num = fnBlockNum(row)\r\n  console.log(row,'rrrrrreeeeeeeeeeeee',num)\r\n  let str = row;\r\n  //  let arr =['let','var','=>','+','=',':',\"case\",'for','function','switch','console.log']\r\n  keyword.forEach((item, index) => {\r\n    if (str.indexOf(item) !== -1) {\r\n      // arr[item.indexOf('class')+5]\r\n      str = insertStr(\r\n        str,\r\n        str.indexOf(item),\r\n        `<text classeqs\"keywords\">${item}</text>`,\r\n        item.length\r\n      );\r\n    }\r\n  });\r\n  return `<p  styleeqs\"margin-left&mh&${num*5}px;\" >${str}</p>`;\r\n}\r\n\r\n//处理符号高亮 #0086cd\r\nfunction symbolHighLight(row) {\r\n  \r\n  //判断是数字\r\n  let arr = row.split(\"\");\r\n  //  debugger\r\n  arr.forEach((item, index) => {\r\n    console.log(index == row.indexOf('px')-2 || index == row.indexOf('px')-1,row)\r\n    if (\r\n      !isNaN(Number(item)) &&\r\n      item.trim() !== \"\" &&\r\n      arr[index - 1] !== \"'\" &&\r\n      arr[index + 1] !== \"'\" && \r\n      (index == row.indexOf('px')-3)\r\n\r\n    ) {\r\n      arr[index] = `<text classeqs\"symbol\">${item}</text>`;\r\n    }\r\n  });\r\n  return `${arr.join(\"\")}`;\r\n}\r\n\r\n//\r\nfunction fnHighLight(row) {\r\n  let num = fnBlockNum(row)\r\n  let str = \"\";\r\n  if (/[a-z]*\\(*\\)/.test(row.trim())) {\r\n    let arr = row.split(\"(\");\r\n    if (\r\n      keyword.indexOf(arr[0].trim()) == -1 &&\r\n      arr[0].trim().indexOf(\" \") === -1 &&\r\n      arr[0].trim() !== \"\"\r\n    ) {\r\n      console.log([\r\n        arr[1],\r\n        row.indexOf(\"(\") - arr[0].trim().length,\r\n        `<text classeqs\"fn\">${arr[0].trim()}</text>`,\r\n        0\r\n      ])\r\n      str = `<text classeqs\"fn\" styleeqs\"margin-left&mh&${num*5}px;\">${arr[0].trim()}</text>(` + arr[1]\r\n    }\r\n  }\r\n\r\n  if (str === \"\") {\r\n    return row;\r\n  } else {\r\n    return str;\r\n  }\r\n}\r\n\r\n//方法：\r\n//soure 原字符串\r\n//start 位置\r\n//newStr 要插入的字符串\r\nfunction insertStr(soure, start, newStr, num) {\r\n  let arr = [soure.slice(0, start), newStr, soure.slice(start + num)];\r\n  return arr.join(\"\");\r\n}\r\n\r\nfunction fnBlockNum(str){\r\n    let arr = str.split('')\r\n    if(!arr[0]===' ')return 0\r\n    console.log(arr,'lllllllllllllllllll')\r\n    let num = 0\r\n    let flag = true\r\n    arr.forEach((item,index)=>{\r\n      if(item == ' '){\r\n        num++\r\n      }else{\r\n        return num\r\n      }\r\n    })\r\n    return num\r\n}\r\n\r\n\r\n/***\r\n * \r\n * 目前遇到一些暂时不可解决的问题\r\n * 1.class=用classeqs来代替最后替换\r\n * 2.style=用styleeqs来代替最后替换\r\n * 3.”：“ 用&mh&\r\n */\n\n//# sourceURL=webpack:///./index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./index.js"]();
/******/ 	
/******/ })()
;